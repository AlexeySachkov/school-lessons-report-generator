import cache
import api
import codecs
import datetime
import time
import json

HEADER = '<!DOCTYPE html><html>' \
         '<head><title>Отчёт о решении задач на codeforces</title>' \
         '<meta charset="UTF-8" />' \
         '<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">' \
         '<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>' \
         '<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>' \
         '<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>' \
         '<style type="text/css">' \
         'body { padding-top: 50px; }' \
         '</style>' \
         '</head><body>'

now = datetime.datetime.now()

FOOTER = '<div class="container"><div class="row"><div class="col-md-12"><hr />' \
         '<p>Последнее обновление: {}' \
         '<p>Все вопросы, пожелания, найденные ошибки и неточности можно сообщить <a href="https://github.com/AlexeySachkov/AlexeySachkov.github.io/issues/new">создав issue</a>' \
         '<p>Generated by <a href="https://github.com/AlexeySachkov/AlexeySachkov.github.io/blob/master/38.10.2018/main.py">python script</a>. Big thanks <a href="https://codeforces.com/">Codeforces</a> for the <a href="http://codeforces.com/api/help">API</a>' \
         '<p>Powered by <a href="https://pages.github.com/">Github Pages</a> and <a href="https://getbootstrap.com/">Bootstrap</a>' \
         '</div></div></div></body></html>'.format(now.strftime("%d.%m.%Y %H:%M"))


def next_date_timestamp(date):
    current = datetime.datetime.strptime(date.strftime("%d/%m/%Y"), "%d/%m/%Y")
    next = current + datetime.timedelta(days=1)
    return time.mktime(next.timetuple())



def fetch_submissions(handles):
    for handle in handles:
        cache.save('{}.submissions'.format(handle), api.fetch_submissions(handle))


def render_personal_report(handle, term_data):
    fetch_submissions([handle])
    submissions = cache.get('{}.submissions'.format(handle))

    with codecs.open('reports/{}.html'.format(handle), 'w', "utf-8") as file:
        file.write(HEADER)
        file.write('<div class="container"><div class="row"><div class="col-md-12">')
        file.write('<h2 class="page-header">Отчёт о выполнении домашнего задания <a href="https://codeforces.com/profile/{}">{}</a></h2><hr />'.format(handle, handle))

        per_problem = {}
        included_in_homework = set()
        included_in_classwork = set()
        data = sorted(submissions, key=lambda k: k['creationTimeSeconds'])

        for submission in data:
            problem = str(submission['problem']['contestId']) + submission['problem']['index']
            if problem not in per_problem:
                per_problem[problem] = [submission]
            else:
                per_problem[problem].append(submission)

        index = 0
        homework_scores = {}
        for homework in term_data['homeworks']:
            index = index + 1
            file.write('<div class="card">')
            file.write('<div class="card-header">Домашняя работа №{}</div>'.format(index))
            file.write('<ul class="list-group list-group-flush">')
            file.write('<li class="list-group-item">Задана: {}</li>'.format(homework['from'].strftime("%d.%m.%Y")))
            file.write('<li class="list-group-item">Сдать до: {}</li>'.format(homework['to'].strftime("%d.%m.%Y")))
            file.write('</ul><div class="card-body">')

            end_timestamp = next_date_timestamp(homework['to'])

            num_in_time = 0
            num_late = 0
            for problem in homework['problems']:
                included_in_homework.add(problem)
                file.write('<h5 class="card-title">{}</h5>'.format(problem))
                if problem not in per_problem:
                    file.write('<p class="text-danger"><strong>Не было сделано ни одной попытки!</strong>')
                else:
                    got_ac = False
                    in_time = False
                    for submission in per_problem[problem]:
                        if submission['verdict'] == 'OK':
                            got_ac = True
                            if submission['creationTimeSeconds'] < end_timestamp:
                                in_time = True
                                break

                    file.write('Было сделано попыток: {}. '.format(len(per_problem[problem])))
                    if got_ac and in_time:
                        num_in_time = num_in_time + 1
                        file.write('<strong class="text-success">Задача сдана вовремя</strong>')
                    elif got_ac:
                        num_late = num_late + 1
                        file.write('<strong class="text-warning">Задача не была сдана вовремя, однако был сдана позже</strong>')
                    else:
                        file.write('<strong class="text-danger">Задача не была сдана</strong>')
                    file.write('<p><a data-toggle="collapse" href="#{}-{}">Показать все попытки</>'.format(handle, problem))
                    file.write('<ul class="collapse" id="{}-{}">'.format(handle, problem))
                    for submission in per_problem[problem]:
                        file.write('<li><a href="https://codeforces.com/contest/{}/submission/{}">{}</a> - {}</li>'.format(submission['problem']['contestId'], submission['id'], submission['id'], submission['verdict']))
                    file.write('</ul>')

            file.write('</div><div class="card-footer">')
            file.write('<p><strong>Система оценок:</strong> 1 балл за задачу, которая была сдана вовремя; 0.75 за дорешаную позже задачу')
            file.write('<p>Оценка выставляется исходя из процентного соотношения количества полученных балов к максимально возможному количеству баллов')
            file.write('<p><=25% - 2; <=50% - 3; <= 75% - 4; > 75% - 5')
            file.write('</div><div class="card-footer">')
            score = num_in_time + num_late * 0.75
            percent = int(score / len(homework['problems']) * 100)
            if percent <= 25:
                final_score = 2
            elif percent <= 50:
                final_score = 3
            elif percent <= 75:
                final_score = 4
            else:
                final_score = 5
            homework_scores[index] = final_score
            file.write('<p>Всего решено задач: {}, вовремя: {}, дорешано: {}. Оценка: {} ({}/{} - {}%)'.format(num_in_time + num_late, num_in_time, num_late, final_score, score, len(homework['problems']), percent))
            file.write('</div></div><br />')

        for homework in term_data['classworks']:
            index = index + 1
            file.write('<div class="card">')
            file.write('<div class="card-header">Классная работa {}/{}</div>'.format(homework['dates'][0].strftime("%d.%m.%Y"), homework['dates'][1].strftime("%d.%m.%Y")))
            file.write('<ul class="list-group list-group-flush">')
            file.write('</ul><div class="card-body">')

            for problem in homework['problems']:
                included_in_classwork.add(problem)
                file.write('<h5 class="card-title">{}</h5>'.format(problem))
                if problem not in per_problem:
                    file.write('<p class="text-danger"><strong>Не было сделано ни одной попытки!</strong>')
                else:
                    got_ac = False
                    for submission in per_problem[problem]:
                        if submission['verdict'] == 'OK':
                            got_ac = True

                    file.write('Было сделано попыток: {}. '.format(len(per_problem[problem])))
                    if got_ac:
                        file.write('<strong class="text-success">Задача сдана</strong>')
                    else:
                        file.write('<strong class="text-warning">Задача не была сдана</strong>')
                    file.write('<p><a data-toggle="collapse" href="#{}-{}">Показать все попытки</>'.format(handle, problem))
                    file.write('<ul class="collapse" id="{}-{}">'.format(handle, problem))
                    for submission in per_problem[problem]:
                        file.write('<li><a href="https://codeforces.com/contest/{}/submission/{}">{}</a> - {}</li>'.format(submission['problem']['contestId'], submission['id'], submission['id'], submission['verdict']))
                    file.write('</ul>')

            file.write('</div>')
            file.write('</div><br />')

        file.write('<div class="card">')
        file.write('<div class="card-header">Дополнительнo решённые задачи</div>')
        file.write('<div class="card-body">')
        count = 0
        startTimestamp = time.mktime(term_data['from'].timetuple())
        for problem, submissions in per_problem.items():
            if problem in included_in_homework or problem in included_in_classwork:
                continue
            actual_submissions = []
            for submission in submissions:
                if submission['creationTimeSeconds'] >= startTimestamp:
                    actual_submissions.append(submission)

            if len(actual_submissions) == 0:
                continue

            count = count + 1
            file.write('<h5 class="card-title">{}</h5>'.format(problem))
            got_ac = False
            for submission in actual_submissions:
                if submission['verdict'] == 'OK':
                    got_ac = True
            if got_ac:
                file.write('<strong class="text-success">Задача была сдана</strong>')
            else:
                file.write('<strong class="text-warning">Задача не была сдана</strong>')
            file.write('<p><a data-toggle="collapse" href="#{}-{}">Показать все попытки</>'.format(handle, problem))
            file.write('<ul class="collapse" id="{}-{}">'.format(handle, problem))
            for submission in actual_submissions:
                file.write('<li><a href="https://codeforces.com/contest/{}/submission/{}">{}</a> - {}</li>'.format(submission['problem']['contestId'], submission['id'], submission['id'], submission['verdict']))
            file.write('</ul>')

        if count == 0:
            file.write('<p>Ни одной попытки по другим задачам сделано не было')

        file.write('</div></div>')

        file.write('</div></div></div>')
        file.write(FOOTER)


def render_personal_reports(data_file):
    with open('data/{}'.format(data_file)) as file:
        data = json.load(file)
        for term in data['terms']:
            d, m, y = term['from']
            term['from'] = datetime.date(y, m, d)
            for homework in term['homeworks']:
                d, m, y = homework['from']
                homework['from'] = datetime.date(y, m, d)
                d, m, y = homework['to']
                homework['to'] = datetime.date(y, m, d)
            for classwork in term['classworks']:
                d, m, y = classwork['dates'][0]
                classwork['dates'][0] = datetime.date(y, m, d)
                d, m, y = classwork['dates'][1]
                classwork['dates'][1] = datetime.date(y, m, d)

        for handle in data['handles']:
            render_personal_report(handle, data['terms'][1])

def generate(data_file):
    pass